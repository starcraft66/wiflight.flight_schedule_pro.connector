#!/usr/bin/python

from collections import namedtuple
import wiflight
import uuid

Reservation = namedtuple('FSPReservation', 'crew start end tail reservation_id')

def get_crew(session, exc, displayname):
    """Fetch or create crew members by searching CrewDb

    Flight Schedule Pro reservations unfortunately list crew by
    real name only (no email address, no sort of FSP identifier).
    In order to map these names to Wi-Flight users, we use CrewDb.

    We search in CrewDb for a user whose full name matches the
    one we received. If we do not find one, we create one with
    an autogenerated username.

    Returns a tuple of:
    - username
    - domain name to use for reservation
    """
    search = wiflight.APICrewDbSearch(displayname)
    search.load(session)
    found = None
    fleet = None
    extra_fleet = False
    for result in search:
        if hasattr(result, 'username'):
            # it's a user, not a fleet
            if result.name == displayname:
                if found is None:
                    found = result
                else:
                    raise exc("Entry with name %r exists more than once in CrewDb; can't decide which one to use." % (
                        displayname,
                    ))
        else:
            # We need to keep track of fleets
            # in case we need to create the user
            if fleet is None:
                fleet = result
            else:
                extra_fleet = True
    if found is not None:
        return found.username, found.dbdomain, found.useruuid
    if extra_fleet:
        raise exc("Entry with name %r must be created in CrewDb but I have access to more than one fleet and I can't decide which one to use." % (
            displayname,
        ))
    if fleet is None:
        raise exc("Entry with name %r must be created in CrewDb but I don't have access to do it." % (
            displayname,
        ))
    domain = fleet.temporary_username_domain
    username = "fsp-%s@%s" % (str(uuid.uuid4()), domain)
    newuser = wiflight.APICrewDbEntry(fleet.name, username)
    newuser.name = displayname
    newuser.dbdomain = domain
    newuser.save(session)
    return username, domain, None

def process_reservation_notice(config, resv, exc, isdelete=False):
    if not resv.start or not resv.end:
        raise exc("Reservation without start or end timestamps: " + str(resv))
    if resv.end < resv.start:
        raise exc("Reservation ended before it started: " + str(resv))
    if not resv.tail:
        raise exc("Reservation with no aircraft: " + str(resv))
    if not resv.reservation_id:
        raise exc("Reservation with no reservation ID: " + str(resv))
    if not resv.crew:
        # ignore reserations without any crew
        # since the main purpose of the connector
        # is to populate crew information
        return

    if config.url:
        anonymous_session = wiflight.APISession(config.url)
    else:
        anonymous_session = wiflight.APISession()
    with anonymous_session.login(config.user, config.password) as session:

        # We might have to create more than one reservation if the
        # usernames are in different domains. This is not supposed
        # to happen, though.
        by_domain = {}
        crew_usernames = []
        for member in resv.crew:
            username, dbdomain, useruuid = get_crew(session, exc, member)
            if dbdomain not in by_domain:
                by_domain[dbdomain] = [], []
            if useruuid is None:
                # legacy CrewDb entry, reserve by username
                by_domain[dbdomain][0].append(username)
            else:
                # newer CrewDb entry, reserve by UUID
                by_domain[dbdomain][1].append(useruuid)

        for resv_domain, crewlist in by_domain.iteritems():
            r = wiflight.APIReservation('flight-schedule-pro-%d@%s' % (
                resv.reservation_id, resv_domain
            ))
            for x in crewlist[0]:
                r.crew.add(x)
            for x in crewlist[1]:
                r.crew_by_uuid.add(x)
            r.domain = 'flight-schedule-pro-connector'
            r.start = resv.start
            r.end = resv.end
            r.aircraft = wiflight.APIAircraft(resv.tail)
            # It could be new, or it could be an update.
            # Either way, it fully replaces whatever was there before.
            try:
                if isdelete:
                    r.delete_noguard(session)
                else:
                    r.save_noguard(session)
            except wiflight.HTTPError, e:
                if e.code in (400, 403):
                    raise exc("The server did not allow me to create or update this reservation: " + repr(e))
                elif e.code == 404 and isdelete:
                    pass
                else:
                    raise
